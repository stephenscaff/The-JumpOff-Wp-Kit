<?php
/**
*   Circular Custom Post Type Nav
* 
*   @decription: Circular cusotm post type nav, that lnks last post to first and vis versa.
* 
*   @param string       $link           Link permalink format.
*   @param bool         $in_same_term   Optional. Whether link should be in a same taxonomy term. Default is false.
*   @param array|string $excluded_terms Optional. Array or comma-separated list of excluded term IDs. Default is ''.
*   @param bool         $previous       Optional. Whether to display link to previous or next post. Default is true.
*   @example
*     <?php jumpoff_next_link(  '%link', '<i class="icon-left-chev"></i>', true, '', 'team-type'); ?>
*     <?php jumpoff_prev_link(  '%link', '<i class="icon-right-chev"></i>', true, '', 'team-type' ); ?>
*
**/
defined( 'ABSPATH' ) or die();

if ( ! class_exists( 'cptNav' ) ) :

class cptNav {

  /**
   * Flag to indicate if loop navigation is currently enanbled.
   *
   * @var bool
   */
  public static $loop_navigation_find = false;


  /**
   * Class constructor: initializes class variables and adds actions and filters.
   *
   */
  public static function init() {
    // Load plugin textdomain.
    add_action( 'plugins_loaded', array( __CLASS__, 'load_textdomain' ) );

    /*
     * Register actions to filter WHERE clause when previous or next post query is being processed.
     */
    add_filter( 'get_next_post_where',     array( __CLASS__, 'modify_nextprevious_post_where' ) );
    add_filter( 'get_previous_post_where', array( __CLASS__, 'modify_nextprevious_post_where' ) );
  }

  /**
   * Loads the plugin domain for If File Exists.
   */
  public static function load_textdomain() {
    load_plugin_textdomain( 'loop-post-navigation-links' );
  }

  /**
   * Modifies the SQL WHERE clause used by WordPress when getting a previous/next post to accommodate looping navigation.
   *
   * Can be either next post link or previous.
   *
   * @param string       $where          SQL WHERE clause generated by WordPress
   * @param string       $link           Link permalink format.
   * @param bool         $in_same_term   Optional. Whether link should be in a same taxonomy term. Default is false.
   * @param array|string $excluded_terms Optional. Array or comma-separated list of excluded term IDs. Default is ''.
   * @param bool         $previous       Optional. Whether to display link to previous or next post. Default is true.
   */
  public static function modify_nextprevious_post_where( $where ) {
    // The incoming WHERE statement generated by WordPress is a condition for the
    // date, relative to the current post's date. To find the post we want, we
    // just need to get rid of that condition (which is the first) and retain the
    // others.
    if ( self::$loop_navigation_find ) {
      $where = preg_replace( '/WHERE (.+) AND/imsU', 'WHERE', $where );
    }

    return $where;
  }

} // end cptNav

cptNav::init();

endif; // end if !class_exists()



/*
 *
 * TEMPLATE FUNCTIONS
 *
 */


if ( ! function_exists( 'jumpoff_get_next_or_loop_link' ) ) :
/**
 * Gets next post link that is adjacent to the current post, or if none, then
 * the first post in the series.
 *
 * @param string       $format         Optional. Link anchor format. Default is '%link &raquo;'.
 * @param string       $link           Optional. Link permalink format. Default is '%title'.
 * @param bool         $in_same_term   Optional. Whether link should be in a same taxonomy term. Default is false.
 * @param array|string $excluded_terms Optional. Array or comma-separated list of excluded term IDs. Default is ''.
 * @param string       $taxonomy       Optional. Taxonomy, if $in_same_term is true. Default 'category'.
 */
function jumpoff_get_next_or_loop_link( $format='%link &raquo;', $link='%title', $in_same_term = false, $excluded_terms = '', $taxonomy = 'category' ) {
  return jumpoff_get_adjacent_or_loop_link( $format, $link, $in_same_term, $excluded_terms, false, $taxonomy );
}
add_action( 'jumpoff_get_next_or_loop_link', 'jumpoff_get_next_or_loop_link', 10, 5 );
endif;


if ( ! function_exists( 'jumpoff_next_link' ) ) :
/**
 * Displays next post link that is adjacent to the current post, or if none, then
 * the first post in the series.
 *
 * @param string       $format         Optional. Link anchor format. Default is '%link &raquo;'.
 * @param string       $link           Optional. Link permalink format. Default is '%title'.
 * @param bool         $in_same_term   Optional. Whether link should be in a same taxonomy term. Default is false.
 * @param array|string $excluded_terms Optional. Array or comma-separated list of excluded term IDs. Default is ''.
 * @param string       $taxonomy       Optional. Taxonomy, if $in_same_term is true. Default 'category'.
 */
function jumpoff_next_link( $format='%link &raquo;', $link='%title', $in_same_term = false, $excluded_terms = '', $taxonomy = 'category' ) {
  jumpoff_adjacent_or_loop_link( $format, $link, $in_same_term, $excluded_terms, false, $taxonomy );
}
add_action( 'jumpoff_next_link', 'jumpoff_next_link', 10, 5 );
endif;


if ( ! function_exists( 'jumpoff_get_prev_or_loop_link' ) ) :
/**
 * Gets previous post link that is adjacent to the current post, or if none,
 * then the last post in the series.
 *
 * @param string       $format         Optional. Link anchor format. Default is '&laquo; %link'.
 * @param string       $link           Optional. Link permalink format. Default is '%title'.
 * @param bool         $in_same_term   Optional. Whether link should be in a same taxonomy term. Default is false.
 * @param array|string $excluded_terms Optional. Array or comma-separated list of excluded term IDs. Default is ''.
 * @param string       $taxonomy       Optional. Taxonomy, if $in_same_term is true. Default 'category'.
 */
function jumpoff_get_prev_or_loop_link( $format='&laquo; %link', $link='%title', $in_same_term = false, $excluded_terms = '', $taxonomy = 'category' ) {
  return jumpoff_get_adjacent_or_loop_link( $format, $link, $in_same_term, $excluded_terms, true, $taxonomy );
}
add_action( 'jumpoff_prev_link', 'jumpoff_prev_link', 10, 5 );
endif;


if ( ! function_exists( 'jumpoff_prev_link' ) ) :
/**
 * Display previous post link that is adjacent to the current post, or if none,
 * then the last post in the series.
 *
 * @param string       $format         Optional. Link anchor format. Default is '&laquo; %link'.
 * @param string       $link           Optional. Link permalink format. Default is '%title'.
 * @param bool         $in_same_term   Optional. Whether link should be in a same taxonomy term. Default is false.
 * @param array|string $excluded_terms Optional. Array or comma-separated list of excluded term IDs. Default is ''.
 * @param string       $taxonomy       Optional. Taxonomy, if $in_same_term is true. Default 'category'.
 */
function jumpoff_prev_link( $format='&laquo; %link', $link='%title', $in_same_term = false, $excluded_terms = '', $taxonomy = 'category' ) {
  jumpoff_adjacent_or_loop_link( $format, $link, $in_same_term, $excluded_terms, true, $taxonomy );
}
add_action( 'jumpoff_prev_link', 'jumpoff_prev_link', 10, 5 );
endif;


if ( ! function_exists( 'jumpoff_get_adjacent_or_loop_link' ) ) :
/**
 * Gets adjacent post link or the post link for the post at the opposite end of the series.
 *
 * Can be either next post link or previous.
 *
 * @param string       $format         Link anchor format.
 * @param string       $link           Link permalink format.
 * @param bool         $in_same_term   Optional. Whether link should be in a same taxonomy term. Default is false.
 * @param array|string $excluded_terms Optional. Array or comma-separated list of excluded term IDs. Default is ''.
 * @param bool         $previous       Optional. Whether to display link to previous or next post. Default is true.
 * @param string       $taxonomy       Optional. Taxonomy, if $in_same_term is true. Default 'category'.
 */
function jumpoff_get_adjacent_or_loop_link( $format, $link, $in_same_term = false, $excluded_terms = '', $previous = true, $taxonomy = 'category' ) {
  if ( $previous && is_attachment() )
    $post = get_post( get_post()->post_parent );
  else
    $post = get_adjacent_post( $in_same_term, $excluded_terms, $previous, $taxonomy );

  // START The only modification of get_adjacent_post_link() -- get the last/first post if there isn't a legitimate previous/next post
  if ( ! $post ) {
    cptNav::$loop_navigation_find = true;
    $post = get_adjacent_post( $in_same_term, $excluded_terms, $previous, $taxonomy );
    cptNav::$loop_navigation_find = false;
    // Don't loop to itself.
    if ( $post == get_post() ) {
      $post = null;
    }
  }
  // END modification

  if ( ! $post ) {
    $output = '';
  } else {
    $title = $post->post_title;

    if ( empty( $post->post_title ) )
      $title = $previous ? __( 'Previous Post' ) : __( 'Next Post' );

    /** This filter is documented in wp-includes/post-template.php */
    $title = apply_filters( 'the_title', $title, $post->ID );

    $date = mysql2date( get_option( 'date_format' ), $post->post_date );
    $rel = $previous ? 'prev' : 'next';

    $string = '<a href="' . get_permalink( $post ) . '" rel="' . $rel . '">';
    $link = str_replace( '%title', $title, $link );
    $link = str_replace( '%date', $date, $link );
    $link = $string . $link . '</a>';

    $output = str_replace( '%link', $link, $format );
  }

  $adjacent = $previous ? 'previous' : 'next';

  // Apply the filters present in WP's adjacent_or_loop_post_link()
  $output = apply_filters( "{$adjacent}_post_link", $output, $format, $link, $post );

  // Apply old {$adjacent}_or_loop_post_link filters.
  // Deprecated as of v2.0. Here temporarily for backwards compatibility.
  $output = apply_filters( "{$adjacent}_or_loop_post_link", $output, $format, $link, $post );

  // Apply custom filters and return
  return apply_filters( "jumpoff_{$adjacent}_or_loop_post_link_get", $output, $format, $link, $post, $in_same_term, $excluded_terms, $taxonomy );
}
add_action( 'jumpoff_get_adjacent_or_loop_link', 'jumpoff_get_adjacent_or_loop_link', 10, 6 );
endif;


if ( ! function_exists( 'jumpoff_adjacent_or_loop_link' ) ) :
/**
 * Displays adjacent post link or the post link for the post at the opposite end of the series.
 *
 * Can be either next post link or previous.
 *
 * @param string       $format         Link anchor format.
 * @param string       $link           Link permalink format.
 * @param bool         $in_same_term   Optional. Whether link should be in a same taxonomy term. Default is false.
 * @param array|string $excluded_terms Optional. Array or comma-separated list of excluded term IDs. Default is ''.
 * @param bool         $previous       Optional. Whether to display link to previous or next post. Default is true.
 * @param string       $taxonomy       Optional. Taxonomy, if $in_same_term is true. Default 'category'.
 */
function jumpoff_adjacent_or_loop_link( $format, $link, $in_same_term = false, $excluded_terms = '', $previous = true, $taxonomy = 'category' ) {
  if ( $previous && is_attachment() ) {
    $post = get_post( get_post()->post_parent );
  } else {
    $post = get_adjacent_post( $in_same_term, $excluded_terms, $previous, $taxonomy );
  }

  $adjacent = $previous ? 'previous' : 'next';

  // Apply custom filters and echo
  echo apply_filters(
    "jumpoff_{$adjacent}_or_loop_post_link_output",
    jumpoff_get_adjacent_or_loop_link( $format, $link, $in_same_term, $excluded_terms, $previous, $taxonomy ),
    $format,
    $link,
    $post,
    $in_same_term,
    $excluded_terms,
    $taxonomy
  );
}
add_action( 'jumpoff_adjacent_or_loop_link', 'jumpoff_adjacent_or_loop_link', 10, 6 );
endif;

if ( ! function_exists( 'jumpoff_get_adjacent_or_loop_post' ) ) :
/**
 * Returns adjacent post or the post at the opposite end of the series.
 *
 * Can be either next post or previous post.
 *
 * @param bool          $in_same_term   Optional. Whether link should be in a same taxonomy term. Default is false.
 * @param array|string  $excluded_terms Optional. Array or comma-separated list of excluded term IDs. Default is ''.
 * @param bool          $previous       Optional. Whether to display link to previous or next post. Default is true.
 * @param string        $taxonomy       Optional. Taxonomy, if $in_same_term is true. Default 'category'.
 *
 * @return WP_Post|null The post, or null if the post loops back to itself.
 */
function jumpoff_get_adjacent_or_loop_post( $in_same_term = false, $excluded_terms = '', $previous = true, $taxonomy = 'category' ) {
  if ( $previous && is_attachment() ) {
    $post = get_post( get_post()->post_parent );
  } else {
    $post = get_adjacent_post( $in_same_term, $excluded_terms, $previous, $taxonomy );
  }

  if ( ! $post ) {
    cptNav::$loop_navigation_find = true;
    $post = get_adjacent_post( $in_same_term, $excluded_terms, $previous, $taxonomy );
    cptNav::$loop_navigation_find = false;
    // Don't loop to itself.
    if ( $post == get_post() ) {
      $post = null;
    }
  }

  return $post;
}
add_action( 'jumpoff_get_adjacent_or_loop_post', 'jumpoff_get_adjacent_or_loop_post', 10, 4 );
endif;

if ( ! function_exists( 'jumpoff_get_next_or_loop_post' ) ) :
/**
 * Returns next post or the post at the beginning of the series.
 *
 * @param bool          $in_same_term   Optional. Whether link should be in a same taxonomy term. Default is false.
 * @param array|string  $excluded_terms Optional. Array or comma-separated list of excluded term IDs. Default is ''.
 * @param string        $taxonomy       Optional. Taxonomy, if $in_same_term is true. Default 'category'.
 *
 * @return WP_Post|null The post, or null if the post loops back to itself.
 */
function jumpoff_get_next_or_loop_post( $in_same_term = false, $excluded_terms = '', $taxonomy = 'category' ) {
  return jumpoff_get_adjacent_or_loop_post( $in_same_term, $excluded_terms, false, $taxonomy );
}
add_action( 'jumpoff_get_next_or_loop_post', 'jumpoff_get_next_or_loop_post', 10, 3 );
endif;

if ( ! function_exists( 'jumpoff_get_prev_or_loop_post' ) ) :
/**
 * Returns previous post or the post at the end of the series.
 *
 * @param bool          $in_same_term   Optional. Whether link should be in a same taxonomy term. Default is false.
 * @param array|string  $excluded_terms Optional. Array or comma-separated list of excluded term IDs. Default is ''.
 * @param string        $taxonomy       Optional. Taxonomy, if $in_same_term is true. Default 'category'.
 *
 * @return WP_Post|null The post, or null if the post loops back to itself.
 */
function jumpoff_get_prev_or_loop_post( $in_same_term = false, $excluded_terms = '', $taxonomy = 'category' ) {
  return jumpoff_get_adjacent_or_loop_post( $in_same_term, $excluded_terms, true, $taxonomy );
}
add_action( 'jumpoff_get_prev_or_loop_post', 'jumpoff_get_prev_or_loop_post', 10, 3 );
endif;