
//----------------------------------------------  
//  flex-grid();
//  @description: Creates grid blocks via flexbox

//  @param: $sm, $med, $lg, $xl - @media sizes
//  @param: $pad  - item padding  
//  @useage: @include g-blocks(1, 2, 3, 4, 1%);

//  @note: Can replace universal selector with '& > #{$item}''  ($item:'article')
//----------------------------------------------
@mixin flex-grid($sm:null, $med:null, $lg:null, $xl:null, $pad:0) {
  display: flex;
  flex-direction: row;
  flex-flow: wrap;
  margin-left: -$pad;
  margin-right: -$pad;

  & > * {
    padding:$pad;
    flex-basis: 100%/$sm;
    max-width: 100%/$sm;
    
    @if $med {
      @media(min-width: $mq-med){
        flex-basis: 100%/$med;
        max-width: 100%/$med;
      }
    }

    @if $lg {
      @media(min-width: $mq-large){
        flex-basis: 100%/$lg;
        max-width: 100%/$lg;
      }
    }

    @if $xl {
      @media(min-width: $mq-xlarge){
        flex-basis: 100%/$xl;
        max-width: 100%/$xl;
      }
    }
  }
  &.grid--centered{
    justify-content: center;
  }
}


//----------------------------------------------  
//  Flex Column
//  A helper to output cross browser requirements for 
//  columns inside a flexbox parent. flex-basis isn't
//  enough in all cases.
//
//  @param width 
//----------------------------------------------
@mixin flex-col($width, $mobile:false){
  @if $mobile == 'true' {
    flex-basis: $width;
    width: $width;
    max-width: $width;

  } @else {

    @media (min-width: $mq-med){
      flex-basis: $width;
      width: $width;
      max-width: $width;
    }
  }
}




//----------------------------------------------  
//  g-blocks();
//  @description: Creates grid blocks with clearing via nth-type. 
//                Might seem a bit much, but shit works.
//  @param: $gb_sm, $gb_med, $gb_lg, $gb_xl - @media sizes
//  @param: $pad  - item padding  
//  @param: $g_item - child element that grid applies to
//  @useage: @include g-blocks(1%, article, 1, 2, 3, 4);
//  @todo: maybe make a loop?
//  & > [class*="-item"]
//----------------------------------------------
@mixin g-blocks($gb_sm, $gb_med, $gb_lg, $gb_xl,$g_pad:0, $g_item:'article' ){
  display: block;
  padding: 0;
  margin-left: -$g_pad;
  margin-right: -$g_pad;
  *zoom: 1; 
  @include cf;

  & > #{$g_item} {
    position: relative;
    display: inline-block;
    height: auto;
    float: left;
    padding:$g_pad;
    width: 100%/$gb_sm;
    $nth-equation: #{$gb_sm}n+'+'+1;
    &:nth-of-type(n) { clear: none; }
    &:nth-of-type(#{$nth-equation}) { clear: both; }

    @media(min-width: $mq-med){
      width: 100%/$gb_med;
      $nth-equation: #{$gb_med}n+'+'+1;
      &:nth-of-type(n) { clear: none; }
      &:nth-of-type(#{$nth-equation}) { clear: both; }
    }
    @media(min-width: $mq-large){
      width: 100%/$gb_lg;
      $nth-equation: #{$gb_lg}n+'+'+1;
      &:nth-of-type(n) { clear: none; }
      &:nth-of-type(#{$nth-equation}) { clear: both; }
    }
    @media(min-width: $mq-xlarge){
      width: 100%/$gb_xl;
      $nth-equation: #{$gb_xl}n+'+'+1;
      &:nth-of-type(n) { clear: none; }
      &:nth-of-type(#{$nth-equation}) { clear: both; }
    }  
  }
}

